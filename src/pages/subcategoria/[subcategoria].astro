---
import Layout from "@/layouts/Layout.astro";
import type { ContenidoPagina } from "@/types/types";
import { contenidos } from "@/content/contenidoSubcategorias";
import FiltroMarcas from "@/components/filtros/filtroMarcas.astro";
import { obtenerMarcasUnicas } from "@/utils/MarcasUnicas";
import { getAllProducts } from "@/services/productos";
import type { ApiResponse } from "@/types/types";
import CardProductos from "@/components/cards/CardProductos.astro";
import Spiner from "@/components/Spiner.astro";
import BreadCrums from "@/components/BreadCrums.astro";
const { subcategoria } = Astro.params;
let contenido: ContenidoPagina;
let dataresponse: ApiResponse | null = null;
let marcasUnicas: string[] | null = null;

try {
  dataresponse = await getAllProducts("subcategory", `${subcategoria}`);
  if (dataresponse) {
    marcasUnicas = obtenerMarcasUnicas(dataresponse.productos);
  }
} catch (error) {
  console.error("Error al obtener los productos:", error);
}

if (subcategoria && contenidos[subcategoria]) {
  contenido = contenidos[subcategoria];
} else {
  contenido = {
    titulo: "",
    subTitulo: "",
    texto: "",
    categoria: "",
  };
}

const urlForPage = `${contenido.categoria.replaceAll("-", " ")}`;
---

<Layout title={contenido?.titulo}>
  <BreadCrums pagina={["categoria", `${urlForPage}`, `${contenido.titulo}`]} />
  <section
    class="pt-2 flex flex-col px-4 md:grid-cols-cat-cust md:grid min-h-dvh"
  >
    <aside class="px-2 md:px-5 hidden md:flex">
      <div class="w-full">
        <h1 class="text-sm md:text-lg font-semibold">
          {contenido.titulo}
        </h1>
        <span class="text-gray-500 uppercase text-[12px] mb-2">Filtros*</span>
        <div class="w-full bg-[#ececec] py-3 flex justify-start px-2">
          <h3 class="text-[18px]">Marcas</h3>
        </div>
        <div class="pl-3">
          {
            marcasUnicas && marcasUnicas.length > 0 ? (
              marcasUnicas.map((marca) => <FiltroMarcas marca={marca} />)
            ) : (
              <div class="my-2 flex justify-center text-gray-400">
                <p>No hay marcas disponibles</p>
              </div>
            )
          }
        </div>
      </div>
    </aside>
    <article class="pl-2">
      <h2 class="font-semibold text-lg lg:text-lg uppercase">
        {contenido?.titulo}
      </h2>
      <h2 class="font-semibold text-base lg:text-lg">
        {contenido?.subTitulo}
      </h2>
      <p class="text-wrap font-normal text-sm lg:text-base">
        {contenido?.texto}
      </p>

      <div
        class="w-full gap-x-2 gap-y-2 md:gap-8 flex flex-wrap justify-start mt-4"
      >
        {
          dataresponse && dataresponse.productos.length > 0 ? (
            dataresponse.productos.map((producto) => (
              <CardProductos
                id={producto.id}
                img={producto.image}
                precio={producto.precio}
                ref={producto.referencia}
                nombre={producto.titulo}
                descuento={producto.discount}
                marca={producto.marca}
                categoria={
                  producto.subcategoria?.nombre || "CategorÃ­a desconocida"
                }
              />
            ))
          ) : (
            <div class="flex w-full flex-col items-center justify-center text-center">
              <Spiner />
              <span class="text-xs text-gray-500 mb-2">
                Cargango productos...
              </span>
            </div>
          )
        }
      </div>
    </article>

    <script type="module" is:inline>
      document.addEventListener("DOMContentLoaded", () => {
        const filtroMarcas = document.querySelectorAll('input[name="marca"]');
        const productos = document.querySelectorAll(".card-producto");

        if (!filtroMarcas.length || !productos.length) {
          return;
        }

        function aplicarFiltros() {
          const marcasSeleccionadas = Array.from(filtroMarcas)
            .filter((input) => input.checked)
            .map((input) => input.value);

          productos.forEach((producto) => {
            const marca = producto.getAttribute("data-marca");
            const mostrarProducto =
              marcasSeleccionadas.length === 0 ||
              marcasSeleccionadas.includes(marca);
            producto.style.display = mostrarProducto ? "block" : "none";
          });
        }

        filtroMarcas.forEach((input) =>
          input.addEventListener("change", aplicarFiltros)
        );

        // Inicializar estado del mensaje al cargar
        aplicarFiltros();
      });
    </script>
  </section>
</Layout>
